# DC Jeeves Utterance Configuration 
#
# This file represents the natural language supported by DC Jeeves
# dcjeeves_app will read this file and create a REST API endpoint based on its confugration 
# as well as be capable of calling out backend DC resources.
#
# Words in <brackets> are substitued out either at time of the call or with a scrawl mapping in a configuraiton file.
# Certain words maybe too difficult to call out at time of call but everything can be done that way
# to increase flexibility in the app.
#
# dcjeeves is meant to be a plugin app for north bound access with the vision of using text, voice and 
# machine inputs interacting in a natural language structure.  Therefore all lines in this configuration
# file are meant to be spoken in natural language.
#
# reserved words are the following and should not be used standalone or inside substitutions :
# 	dcjeeves | on | at | where | equals | and
#
# Current supported structures
# dcjeeves <COMMAND> on <ENVIRONMENT> at <CLOUD>
# dcjeeves <COMMAND> on <ENVIRONMENT> at <CLOUD> where <KEY1> equals <VALUE1>
# dcjeeves <COMMAND> on <ENVIRONMENT> at <CLOUD> where <KEY1> equals <VALUE1> and <KEY2> equals <VALUE2> ...
#
# The scrawl configuration file will map substitutions used by dcjeeves in order to keep the spirit of the
# inputs of the app as close to natural language as possible.  This is best described with the following example.
#
# Sample input from a call without using substitutions
# dcjeeves vm start on vdc-rose-win-1 at ucsd-rosemont-1 where vm name equals testvm-02
#
# Sample input from a call using a scrawl file
# dcjeeves vm start on test at rosemont where vm name equals mikes machine
#
# As we can see it is easier to refer to a specific environment as "test" and the cloud as "rosemont" instead of 
# requiring the machine readable format. 
#
# This file was designed to be inherently self-documenting by nature, although more documentation is always appreciated
# and blank lines and lines starting with # are ignored.

dcjeeves start vm on <ENVIRONMENT> at <CLOUD> where vm name equals <VALUE1>
dcjeeves stop vm on <ENVIRONMENT> at <CLOUD> where vm name equals <VALUE1>
dcjeeves reboot vm on <ENVIRONMENT> at <CLOUD> where vm name equals <VALUE1>

dcjeeves list vms on <ENVIRONMENT> at <CLOUD>
dcjeeves show vm status on <ENVIRONMENT> at <CLOUD> where vm name equals <VALUE1>





